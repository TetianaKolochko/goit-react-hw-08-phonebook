{"version":3,"file":"static/js/377.b0399ddd.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","redux/filterSlice.js","components/ContactFilter/ContactFilter.jsx","webpack://react-homework-template/./src/views/PhonebookView.module.css?0783","views/PhonebookView.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__form\":\"ContactForm_contact__form__OjRMi\",\"label\":\"ContactForm_label__-cVXI\",\"contacts__input\":\"ContactForm_contacts__input__JPrCL\",\"input\":\"ContactForm_input__Bl93P\",\"button__submit\":\"ContactForm_button__submit__nnapz\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { toast } from 'react-hot-toast';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\n\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport css from './ContactForm.module.css';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Please, enter the name!'),\n  number: yup.number().required('Please, enter the number!').integer(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const onSubmit = ({ name, number }, { resetForm }) => {\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    const checkUser = contacts.find(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    checkUser\n      ? toast.error('Такий контакт вже існує!')\n      : dispatch(contactsOperations.addContact(newContact)) && resetForm();\n    // toast.success('Ваш контакт додано успішно!');\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={onSubmit}\n    >\n      <Form autoComplete=\"off\" className={css.contact__form}>\n        <label className={css.label}>Name</label>\n        <Field\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className={css.contacts__input}\n        />\n        <ErrorMessage component=\"div\" name=\"name\" />\n        <label className={css.label}>Number</label>\n        <Field\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          className={css.contacts__input}\n        />\n        <ErrorMessage component=\"div\" name=\"number\" />\n\n        <button type=\"submit\" className={css.button__submit}>\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__item\":\"ContactList_contact__item__PFoNH\",\"delete__button\":\"ContactList_delete__button__lvfoG\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { getFilter } from 'redux/filterSlice';\n// import { getContacts } from 'redux/contacts/contacts-selectors';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport { contactsOperations } from 'redux/contacts/index';\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  // const filter = useSelector(getFilter);\n  // const contacts = useSelector(getContacts);\n  // const { deleteContact } = contactsOperations;\n\n  // const getVisibleContacts = filter.toLowerCase();\n  // const newContacts = contacts?.filter(contact =>\n  //   contact.name.toString().toLowerCase().includes(getVisibleContacts)\n  // );\n\n  const onDeleteContacts = id => {\n    dispatch(contactsOperations.deleteContact(id));\n    // Notiflix.Notify.success('Сontact removed from list');\n  };\n\n  return (\n    <ul className=\"name\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={css.contact__item}>\n          {name}: {number}\n          <button\n            className={css.delete__button}\n            type=\"button\"\n            onClick={() => onDeleteContacts(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const filter = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    changeFilter(state, action) {\n      return (state = action.payload);\n    },\n  },\n});\n\nexport const { changeFilter } = filter.actions;\nexport default filter.reducer;\nexport const getFilter = state => state.filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\n\nexport const Filter = ({ filter }) => {\n  \n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n  return (\n    <div>\n      <p>Find contacts by Name</p>\n      <input onChange={handleChange} type=\"text\" name=\"filter\" value={filter} />\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container__box\":\"PhonebookView_container__box__I9gDz\"};","import React from 'react';\nimport { Toaster } from 'react-hot-toast';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\n\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/ContactFilter/ContactFilter';\nimport css from './PhonebookView.module.css';\n\nexport default function PhonebookView() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.container__box}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <Toaster />\n    </div>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getVisibleContacts","filter","getFilter","normalizedFilter","toLowerCase","name","includes","schema","yup","shape","required","number","integer","initialValues","ContactForm","dispatch","useDispatch","useSelector","validationSchema","onSubmit","resetForm","newContact","id","nanoid","find","contact","toast","contactsOperations","autoComplete","className","css","type","pattern","title","component","ContactList","map","onClick","onDeleteContacts","createSlice","initialState","reducers","changeFilter","action","payload","actions","Filter","onChange","evt","currentTarget","value","PhonebookView","useEffect"],"sourceRoot":""}